# Generated by Django 2.2.1 on 2019-05-24 17:34

import datetime
from decimal import Decimal
import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
from django.utils.timezone import utc
import django.utils.timezone
import gwells.db_comments.model_mixins
import uuid
import wells.data_migrations


class Migration(migrations.Migration):

    replaces = [('wells', '0001_squashed_0079_auto_20190506_1959'), ('wells', '0080_add_well_disinfect_status'), ('wells', '0081_update_well_disinfect_values'), ('wells', '0080_fix_bad_idir'), ('wells', '0082_merge_20190510_1926'), ('wells', '0082_auto_20190510_0000'), ('wells', '0083_merge_20190510_2215'), ('wells', '0084_move_liner_perforations'), ('wells', '0082_auto_20190509_1930'), ('wells', '0080_auto_20190507_2011'), ('wells', '0083_merge_20190513_1939'), ('wells', '0085_merge_20190514_0037'), ('wells', '0086_remove_linerperforation_activity_submission'), ('wells', '0082_update_ground_elevation'), ('wells', '0084_merge_20190514_0212'), ('wells', '0087_merge_20190514_1806'), ('wells', '0088_remove_well_ems_id'), ('wells', '0089_auto_20190515_2359')]

    initial = True

    dependencies = [
        ('registries', '0001_initial'),
        ('aquifers', '0001_squashed_0018_auto_20190409_1634'),
        ('submissions', '0001_initial'),
        ('gwells', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ActivitySubmission',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('filing_number', models.AutoField(primary_key=True, serialize=False)),
                ('activity_submission_guid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('driller_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Name of Person Who Did the Work')),
                ('consultant_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Consultant Name')),
                ('consultant_company', models.CharField(blank=True, max_length=200, null=True, verbose_name='Consultant Company')),
                ('work_start_date', models.DateField(blank=True, null=True, verbose_name='Work Start Date')),
                ('work_end_date', models.DateField(blank=True, null=True, verbose_name='Work End Date')),
                ('construction_start_date', models.DateField(null=True, verbose_name='Construction Start Date')),
                ('construction_end_date', models.DateField(null=True, verbose_name='Construction Date')),
                ('alteration_start_date', models.DateField(null=True, verbose_name='Alteration Start Date')),
                ('alteration_end_date', models.DateField(null=True, verbose_name='Alteration Date')),
                ('decommission_start_date', models.DateField(null=True, verbose_name='Decommission Start Date')),
                ('decommission_end_date', models.DateField(null=True, verbose_name='Decommission Date')),
                ('owner_full_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Owner Name')),
                ('owner_mailing_address', models.CharField(blank=True, max_length=100, null=True, verbose_name='Mailing Address')),
                ('owner_city', models.CharField(blank=True, max_length=100, null=True, verbose_name='Town/City')),
                ('owner_postal_code', models.CharField(blank=True, max_length=10, null=True, verbose_name='Postal Code')),
                ('owner_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email address')),
                ('owner_tel', models.CharField(blank=True, max_length=25, null=True, verbose_name='Telephone number')),
                ('street_address', models.CharField(blank=True, max_length=100, null=True, verbose_name='Street Address')),
                ('city', models.CharField(blank=True, max_length=50, null=True, verbose_name='Town/City')),
                ('legal_lot', models.CharField(blank=True, max_length=10, null=True, verbose_name='Lot')),
                ('legal_plan', models.CharField(blank=True, max_length=20, null=True, verbose_name='Plan')),
                ('legal_district_lot', models.CharField(blank=True, max_length=20, null=True, verbose_name='District Lot')),
                ('legal_block', models.CharField(blank=True, max_length=10, null=True, verbose_name='Block')),
                ('legal_section', models.CharField(blank=True, max_length=10, null=True, verbose_name='Section')),
                ('legal_township', models.CharField(blank=True, max_length=20, null=True, verbose_name='Township')),
                ('legal_range', models.CharField(blank=True, max_length=10, null=True, verbose_name='Range')),
                ('legal_pid', models.PositiveIntegerField(blank=True, null=True, verbose_name='PID')),
                ('well_location_description', models.CharField(blank=True, max_length=500, null=True, verbose_name='Well Location Description')),
                ('identification_plate_number', models.PositiveIntegerField(blank=True, null=True, verbose_name='Identification Plate Number')),
                ('well_identification_plate_attached', models.CharField(blank=True, max_length=500, null=True, verbose_name='Well Identification Plate Is Attached')),
                ('id_plate_attached_by', models.CharField(blank=True, max_length=100, null=True, verbose_name='Well identification plate attached by')),
                ('geom', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326, verbose_name='Geo-referenced Location of the Well')),
                ('ground_elevation', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Ground Elevation')),
                ('well_orientation', models.BooleanField(choices=[(True, 'vertical'), (False, 'horizontal')], default=True, verbose_name='Orientation of Well')),
                ('water_supply_system_name', models.CharField(blank=True, max_length=80, null=True, verbose_name='Water Supply System Name')),
                ('water_supply_system_well_name', models.CharField(blank=True, max_length=80, null=True, verbose_name='Water Supply System Well Name')),
                ('surface_seal_depth', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Surface Seal Depth')),
                ('surface_seal_thickness', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Surface Seal Thickness')),
                ('backfill_above_surface_seal', models.CharField(blank=True, max_length=250, null=True, verbose_name='Backfill Material Above Surface Seal')),
                ('backfill_above_surface_seal_depth', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Backfill Depth')),
                ('backfill_depth', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Backfill Depth')),
                ('backfill_type', models.CharField(blank=True, max_length=250, null=True, verbose_name='Backfill Material Above Surface Seal')),
                ('liner_diameter', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Liner Diameter')),
                ('liner_thickness', models.DecimalField(blank=True, decimal_places=3, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Liner Thickness')),
                ('liner_from', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Liner From')),
                ('liner_to', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Liner To')),
                ('other_screen_material', models.CharField(blank=True, max_length=50, null=True, verbose_name='Specify Other Screen Material')),
                ('other_screen_bottom', models.CharField(blank=True, max_length=50, null=True, verbose_name='Specify Other Screen Bottom')),
                ('screen_information', models.CharField(blank=True, max_length=300, null=True, verbose_name='Screen Information')),
                ('filter_pack_from', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Filter Pack From')),
                ('filter_pack_to', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Filter Pack To')),
                ('filter_pack_thickness', models.DecimalField(blank=True, decimal_places=3, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Filter Pack Thickness')),
                ('development_hours', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Development Total Duration')),
                ('development_notes', models.CharField(blank=True, max_length=255, null=True, verbose_name='Development Notes')),
                ('water_quality_colour', models.CharField(blank=True, max_length=60, null=True, verbose_name='Water Quality Colour')),
                ('water_quality_odour', models.CharField(blank=True, max_length=60, null=True, verbose_name='Water Quality Odour')),
                ('total_depth_drilled', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Total Depth Drilled')),
                ('finished_well_depth', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Finished Well Depth')),
                ('final_casing_stick_up', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True, verbose_name='Final Casing Stick Up')),
                ('bedrock_depth', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Depth to Bedrock')),
                ('static_water_level', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Static Water Level (BTOC)')),
                ('well_yield', models.DecimalField(blank=True, decimal_places=3, max_digits=8, null=True, verbose_name='Estimated Well Yield')),
                ('artesian_flow', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Artesian Flow')),
                ('artesian_pressure', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Artesian Pressure')),
                ('well_cap_type', models.CharField(blank=True, max_length=40, null=True, verbose_name='Well Cap Type')),
                ('well_disinfected', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], default=False, verbose_name='Well Disinfected?')),
                ('comments', models.CharField(blank=True, max_length=3000, null=True)),
                ('internal_comments', models.CharField(blank=True, max_length=3000, null=True)),
                ('alternative_specs_submitted', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], default=False, verbose_name='Alternative specs submitted (if required)')),
                ('diameter', models.CharField(blank=True, max_length=9, null=True)),
                ('ems', models.CharField(blank=True, max_length=30, null=True)),
                ('observation_well_number', models.CharField(blank=True, max_length=30, null=True, verbose_name='Observation Well Number')),
                ('decommission_reason', models.CharField(blank=True, max_length=250, null=True, verbose_name='Reason for Decommission')),
                ('decommission_sealant_material', models.CharField(blank=True, max_length=100, null=True, verbose_name='Sealant Material')),
                ('decommission_backfill_material', models.CharField(blank=True, max_length=100, null=True, verbose_name='Backfill Material')),
                ('decommission_details', models.CharField(blank=True, max_length=250, null=True, verbose_name='Decommission Details')),
                ('aquifer_vulnerability_index', models.DecimalField(blank=True, decimal_places=0, max_digits=10, null=True, verbose_name='AVI')),
                ('storativity', models.DecimalField(blank=True, decimal_places=7, max_digits=8, null=True, verbose_name='Storativity')),
                ('transmissivity', models.DecimalField(blank=True, decimal_places=0, max_digits=10, null=True, verbose_name='Transmissivity')),
                ('hydraulic_conductivity', models.TextField(blank=True, max_length=100, null=True, verbose_name='Hydraulic Conductivity')),
                ('specific_storage', models.TextField(blank=True, max_length=100, null=True, verbose_name='Specific Storage')),
                ('specific_yield', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Specific Yield')),
                ('testing_method', models.TextField(blank=True, max_length=100, null=True, verbose_name='Testing Method')),
                ('testing_duration', models.PositiveIntegerField(blank=True, null=True)),
                ('analytic_solution_type', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Analytic Solution Type')),
                ('boundary_effect', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Boundary Effect')),
                ('yield_estimation_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Estimation Rate')),
                ('yield_estimation_duration', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Estimation Duration')),
                ('static_level_before_test', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.0'))], verbose_name='SWL Before Test')),
                ('drawdown', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('hydro_fracturing_performed', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], default=False, verbose_name='Hydro-fracturing Performed?')),
                ('hydro_fracturing_yield_increase', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Well Yield Increase Due to Hydro-fracturing')),
                ('recommended_pump_depth', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Recommended pump depth')),
                ('recommended_pump_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Recommended pump rate')),
                ('aquifer', models.ForeignKey(blank=True, db_column='aquifer_id', null=True, on_delete=django.db.models.deletion.PROTECT, to='aquifers.Aquifer', verbose_name='Aquifer ID Number')),
            ],
            options={
                'db_table': 'activity_submission',
            },
            bases=(models.Model, gwells.db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='AquiferLithologyCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('expiry_date', models.DateTimeField(default=datetime.datetime(9999, 12, 31, 23, 59, 59, 999999, tzinfo=utc))),
                ('aquifer_lithology_code', models.CharField(db_column='aquifer_lithology_code', max_length=100, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name_plural': 'Aquifer Lithology Codes',
                'db_table': 'aquifer_lithology_code',
                'ordering': ['display_order', 'aquifer_lithology_code'],
            },
            bases=(models.Model, gwells.db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='BCGS_Numbers',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('bcgs_id', models.BigIntegerField(editable=False, primary_key=True, serialize=False)),
                ('bcgs_number', models.CharField(max_length=20, verbose_name='BCGS Mapsheet Number')),
            ],
            options={
                'db_table': 'bcgs_number',
            },
            bases=(models.Model, gwells.db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='CasingCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('expiry_date', models.DateTimeField(default=datetime.datetime(9999, 12, 31, 23, 59, 59, 999999, tzinfo=utc))),
                ('code', models.CharField(db_column='casing_code', editable=False, max_length=10, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'casing_code',
                'ordering': ['display_order', 'description'],
            },
            bases=(models.Model, gwells.db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='CasingMaterialCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('expiry_date', models.DateTimeField(default=datetime.datetime(9999, 12, 31, 23, 59, 59, 999999, tzinfo=utc))),
                ('code', models.CharField(db_column='casing_material_code', editable=False, max_length=10, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'casing_material_code',
                'ordering': ['display_order', 'description'],
            },
            bases=(models.Model, gwells.db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='CoordinateAcquisitionCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('effective_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('expiry_date', models.DateTimeField(default=datetime.datetime(9999, 12, 31, 23, 59, 59, 999999, tzinfo=utc))),
                ('code', models.CharField(db_column='coordinate_acquisition_code', editable=False, max_length=1, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=250)),
            ],
            options={
                'db_table': 'coordinate_acquisition_code',
                'ordering': ['code'],
            },
            bases=(models.Model, gwells.db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='DecommissionMaterialCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('effective_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('expiry_date', models.DateTimeField(default=datetime.datetime(9999, 12, 31, 23, 59, 59, 999999, tzinfo=utc))),
                ('code', models.CharField(db_column='decommission_material_code', max_length=30, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, gwells.db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='DecommissionMethodCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('expiry_date', models.DateTimeField(default=datetime.datetime(9999, 12, 31, 23, 59, 59, 999999, tzinfo=utc))),
                ('decommission_method_code', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False, verbose_name='Code')),
                ('description', models.CharField(max_length=255, verbose_name='Description')),
            ],
            options={
                'db_table': 'decommission_method_code',
                'ordering': ['display_order'],
            },
            bases=(models.Model, gwells.db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='DevelopmentMethodCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('expiry_date', models.DateTimeField(default=datetime.datetime(9999, 12, 31, 23, 59, 59, 999999, tzinfo=utc))),
                ('development_method_code', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'development_method_code',
                'ordering': ['display_order', 'description'],
            },
            bases=(models.Model, gwells.db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='DrillingCompany',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('drilling_company_guid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('drilling_company_code', models.CharField(blank=True, max_length=10, null=True)),
                ('name', models.CharField(max_length=200)),
            ],
            options={
                'verbose_name_plural': 'Drilling Companies',
                'db_table': 'drilling_company',
            },
            bases=(models.Model, gwells.db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='DrillingMethodCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('expiry_date', models.DateTimeField(default=datetime.datetime(9999, 12, 31, 23, 59, 59, 999999, tzinfo=utc))),
                ('drilling_method_code', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'drilling_method_code',
                'ordering': ['display_order', 'description'],
            },
            bases=(models.Model, gwells.db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='FilterPackMaterialCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('expiry_date', models.DateTimeField(default=datetime.datetime(9999, 12, 31, 23, 59, 59, 999999, tzinfo=utc))),
                ('filter_pack_material_code', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'filter_pack_material_code',
                'ordering': ['display_order', 'description'],
            },
            bases=(models.Model, gwells.db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='FilterPackMaterialSizeCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('expiry_date', models.DateTimeField(default=datetime.datetime(9999, 12, 31, 23, 59, 59, 999999, tzinfo=utc))),
                ('filter_pack_material_size_code', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'filter_pack_material_size_code',
                'ordering': ['display_order', 'description'],
            },
            bases=(models.Model, gwells.db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='GroundElevationMethodCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('expiry_date', models.DateTimeField(default=datetime.datetime(9999, 12, 31, 23, 59, 59, 999999, tzinfo=utc))),
                ('ground_elevation_method_code', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'ground_elevation_method_code',
                'ordering': ['display_order', 'description'],
            },
            bases=(models.Model, gwells.db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='IntendedWaterUseCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('expiry_date', models.DateTimeField(default=datetime.datetime(9999, 12, 31, 23, 59, 59, 999999, tzinfo=utc))),
                ('intended_water_use_code', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100, verbose_name='Intented Water Use')),
            ],
            options={
                'db_table': 'intended_water_use_code',
                'ordering': ['display_order', 'description'],
            },
            bases=(models.Model, gwells.db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='LandDistrictCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('expiry_date', models.DateTimeField(default=datetime.datetime(9999, 12, 31, 23, 59, 59, 999999, tzinfo=utc))),
                ('land_district_code', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'land_district_code',
                'ordering': ['display_order', 'name'],
            },
            bases=(models.Model, gwells.db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='LicencedStatusCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('expiry_date', models.DateTimeField(default=datetime.datetime(9999, 12, 31, 23, 59, 59, 999999, tzinfo=utc))),
                ('licenced_status_code', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=255, verbose_name='Licence Status')),
            ],
            options={
                'db_table': 'licenced_status_code',
                'ordering': ['display_order', 'licenced_status_code'],
            },
            bases=(models.Model, gwells.db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='LinerMaterialCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('expiry_date', models.DateTimeField(default=datetime.datetime(9999, 12, 31, 23, 59, 59, 999999, tzinfo=utc))),
                ('code', models.CharField(db_column='liner_material_code', editable=False, max_length=10, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'liner_material_code',
                'ordering': ['display_order', 'description'],
            },
            bases=(models.Model, gwells.db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='ObsWellStatusCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('expiry_date', models.DateTimeField(default=datetime.datetime(9999, 12, 31, 23, 59, 59, 999999, tzinfo=utc))),
                ('obs_well_status_code', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'obs_well_status_code',
                'ordering': ['display_order', 'obs_well_status_code'],
            },
            bases=(models.Model, gwells.db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='SurfaceSealMaterialCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('expiry_date', models.DateTimeField(default=datetime.datetime(9999, 12, 31, 23, 59, 59, 999999, tzinfo=utc))),
                ('surface_seal_material_code', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'surface_seal_material_code',
                'ordering': ['display_order', 'description'],
            },
            bases=(models.Model, gwells.db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='SurfaceSealMethodCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('expiry_date', models.DateTimeField(default=datetime.datetime(9999, 12, 31, 23, 59, 59, 999999, tzinfo=utc))),
                ('surface_seal_method_code', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'surface_seal_method_code',
                'ordering': ['display_order', 'description'],
            },
            bases=(models.Model, gwells.db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='WaterQualityCharacteristic',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('code', models.CharField(db_column='water_quality_characteristic_code', max_length=10, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100)),
                ('display_order', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'water_quality_characteristic',
                'ordering': ['display_order', 'description'],
            },
            bases=(models.Model, gwells.db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='WaterQualityColour',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('expiry_date', models.DateTimeField(default=datetime.datetime(9999, 12, 31, 23, 59, 59, 999999, tzinfo=utc))),
                ('code', models.CharField(db_column='water_quality_colour_code', max_length=32, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'water_quality_colour_code',
            },
            bases=(models.Model, gwells.db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='WellClassCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('expiry_date', models.DateTimeField(default=datetime.datetime(9999, 12, 31, 23, 59, 59, 999999, tzinfo=utc))),
                ('well_class_code', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100, verbose_name='Well Class')),
            ],
            options={
                'db_table': 'well_class_code',
                'ordering': ['display_order', 'description'],
            },
            bases=(models.Model, gwells.db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='WellDisinfectedCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('expiry_date', models.DateTimeField(default=datetime.datetime(9999, 12, 31, 23, 59, 59, 999999, tzinfo=utc))),
                ('well_disinfected_code', models.CharField(editable=False, max_length=100, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'well_disinfected_code',
                'ordering': ['display_order', 'description'],
            },
            bases=(models.Model, gwells.db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='WellPublicationStatusCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('expiry_date', models.DateTimeField(default=datetime.datetime(9999, 12, 31, 23, 59, 59, 999999, tzinfo=utc))),
                ('well_publication_status_code', models.CharField(editable=False, max_length=20, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'well_publication_status_code',
                'ordering': ['display_order', 'well_publication_status_code'],
            },
            bases=(models.Model, gwells.db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='WellStatusCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('expiry_date', models.DateTimeField(default=datetime.datetime(9999, 12, 31, 23, 59, 59, 999999, tzinfo=utc))),
                ('well_status_code', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=255, verbose_name='Well Status')),
            ],
            options={
                'db_table': 'well_status_code',
                'ordering': ['display_order', 'well_status_code'],
            },
            bases=(models.Model, gwells.db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='WellYieldUnitCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('expiry_date', models.DateTimeField(default=datetime.datetime(9999, 12, 31, 23, 59, 59, 999999, tzinfo=utc))),
                ('well_yield_unit_code', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100, verbose_name='Well Yield Unit')),
            ],
            options={
                'db_table': 'well_yield_unit_code',
                'ordering': ['display_order', 'description'],
            },
            bases=(models.Model, gwells.db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='YieldEstimationMethodCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('expiry_date', models.DateTimeField(default=datetime.datetime(9999, 12, 31, 23, 59, 59, 999999, tzinfo=utc))),
                ('yield_estimation_method_code', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'yield_estimation_method_code',
                'ordering': ['display_order', 'description'],
            },
            bases=(models.Model, gwells.db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='WellSubclassCode',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('display_order', models.PositiveIntegerField()),
                ('effective_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('expiry_date', models.DateTimeField(default=datetime.datetime(9999, 12, 31, 23, 59, 59, 999999, tzinfo=utc))),
                ('well_subclass_guid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('well_subclass_code', models.CharField(max_length=10)),
                ('description', models.CharField(max_length=100)),
                ('well_class', models.ForeignKey(blank=True, db_column='well_class_code', null=True, on_delete=django.db.models.deletion.PROTECT, to='wells.WellClassCode')),
            ],
            options={
                'db_table': 'well_subclass_code',
                'ordering': ['display_order', 'description'],
            },
            bases=(models.Model, gwells.db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='Well',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('well_guid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('well_tag_number', models.AutoField(primary_key=True, serialize=False, verbose_name='Well Tag Number')),
                ('identification_plate_number', models.PositiveIntegerField(blank=True, null=True, unique=True, verbose_name='Well Identification Plate Number')),
                ('owner_full_name', models.CharField(max_length=200, verbose_name='Owner Name')),
                ('owner_mailing_address', models.CharField(max_length=100, verbose_name='Mailing Address')),
                ('owner_city', models.CharField(blank=True, max_length=100, null=True, verbose_name='Town/City')),
                ('owner_postal_code', models.CharField(blank=True, max_length=10, null=True, verbose_name='Postal Code')),
                ('owner_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email address')),
                ('owner_tel', models.CharField(blank=True, max_length=25, null=True, verbose_name='Telephone number')),
                ('street_address', models.CharField(blank=True, max_length=100, null=True, verbose_name='Street Address')),
                ('city', models.CharField(blank=True, max_length=50, null=True, verbose_name='Town/City')),
                ('legal_lot', models.CharField(blank=True, max_length=10, null=True, verbose_name='Lot')),
                ('legal_plan', models.CharField(blank=True, max_length=20, null=True, verbose_name='Plan')),
                ('legal_district_lot', models.CharField(blank=True, max_length=20, null=True, verbose_name='District Lot')),
                ('legal_block', models.CharField(blank=True, max_length=10, null=True, verbose_name='Block')),
                ('legal_section', models.CharField(blank=True, max_length=10, null=True, verbose_name='Section')),
                ('legal_township', models.CharField(blank=True, max_length=20, null=True, verbose_name='Township')),
                ('legal_range', models.CharField(blank=True, max_length=10, null=True, verbose_name='Range')),
                ('legal_pid', models.PositiveIntegerField(blank=True, null=True, verbose_name='Property Identification Description (PID)')),
                ('well_location_description', models.CharField(blank=True, max_length=500, null=True, verbose_name='Description of Well Location')),
                ('construction_start_date', models.DateField(null=True, verbose_name='Construction Start Date')),
                ('construction_end_date', models.DateField(null=True, verbose_name='Construction Date')),
                ('alteration_start_date', models.DateField(null=True, verbose_name='Alteration Start Date')),
                ('alteration_end_date', models.DateField(null=True, verbose_name='Alteration Date')),
                ('decommission_start_date', models.DateField(null=True, verbose_name='Decommission Start Date')),
                ('decommission_end_date', models.DateField(null=True, verbose_name='Decommission Date')),
                ('well_identification_plate_attached', models.CharField(blank=True, max_length=500, null=True, verbose_name='Well Identification Plate Is Attached')),
                ('id_plate_attached_by', models.CharField(blank=True, max_length=100, null=True, verbose_name='Well identification plate attached by')),
                ('geom', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326, verbose_name='Geo-referenced Location of the Well')),
                ('ground_elevation', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Ground Elevation')),
                ('well_orientation', models.BooleanField(choices=[(True, 'vertical'), (False, 'horizontal')], default=True, verbose_name='Orientation of Well')),
                ('surface_seal_length', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Surface Seal Length')),
                ('surface_seal_depth', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Surface Seal Depth')),
                ('surface_seal_thickness', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Surface Seal Thickness')),
                ('backfill_type', models.CharField(blank=True, max_length=250, null=True, verbose_name='Backfill Material Above Surface Seal')),
                ('backfill_depth', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Backfill Depth')),
                ('liner_diameter', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Liner Diameter')),
                ('liner_thickness', models.DecimalField(blank=True, decimal_places=3, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Liner Thickness')),
                ('liner_from', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Liner From')),
                ('liner_to', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Liner To')),
                ('other_screen_material', models.CharField(blank=True, max_length=50, null=True, verbose_name='Specify Other Screen Material')),
                ('other_screen_bottom', models.CharField(blank=True, max_length=50, null=True, verbose_name='Specify Other Screen Bottom')),
                ('screen_information', models.CharField(blank=True, max_length=300, null=True, verbose_name='Screen Information')),
                ('filter_pack_from', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Filter Pack From')),
                ('filter_pack_to', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Filter Pack To')),
                ('filter_pack_thickness', models.DecimalField(blank=True, decimal_places=3, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Filter Pack Thickness')),
                ('development_hours', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Development Total Duration')),
                ('development_notes', models.CharField(blank=True, max_length=255, null=True, verbose_name='Development Notes')),
                ('water_quality_colour', models.CharField(blank=True, max_length=60, null=True, verbose_name='Water Quality Colour')),
                ('water_quality_odour', models.CharField(blank=True, max_length=60, null=True, verbose_name='Water Quality Odour')),
                ('total_depth_drilled', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Total Depth Drilled')),
                ('finished_well_depth', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Finished Well Depth')),
                ('final_casing_stick_up', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True, verbose_name='Final Casing Stick Up')),
                ('bedrock_depth', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Depth to Bedrock')),
                ('water_supply_system_name', models.CharField(blank=True, max_length=80, null=True, verbose_name='Water Supply System Name')),
                ('water_supply_system_well_name', models.CharField(blank=True, max_length=80, null=True, verbose_name='Water Supply System Well Name')),
                ('static_water_level', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Static Water Level (BTOC)')),
                ('well_yield', models.DecimalField(blank=True, decimal_places=3, max_digits=8, null=True, verbose_name='Estimated Well Yield')),
                ('artesian_flow', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Artesian Flow')),
                ('artesian_pressure', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Artesian Pressure')),
                ('well_cap_type', models.CharField(blank=True, max_length=40, null=True, verbose_name='Well Cap')),
                ('well_disinfected', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], default=False, verbose_name='Well Disinfected')),
                ('comments', models.CharField(blank=True, max_length=3000, null=True)),
                ('internal_comments', models.CharField(blank=True, max_length=3000, null=True)),
                ('alternative_specs_submitted', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], default=False, verbose_name='Alternative specs submitted (if required)')),
                ('diameter', models.CharField(blank=True, max_length=9)),
                ('observation_well_number', models.CharField(blank=True, max_length=30, null=True, verbose_name='Observation Well Number')),
                ('ems', models.CharField(blank=True, max_length=10, null=True, verbose_name='Environmental Monitoring System (EMS) ID')),
                ('utm_zone_code', models.CharField(blank=True, max_length=10, null=True, verbose_name='Zone')),
                ('utm_northing', models.IntegerField(blank=True, null=True, verbose_name='UTM Northing')),
                ('utm_easting', models.IntegerField(blank=True, null=True, verbose_name='UTM Easting')),
                ('decommission_reason', models.CharField(blank=True, max_length=250, null=True, verbose_name='Reason for Decommission')),
                ('decommission_sealant_material', models.CharField(blank=True, max_length=100, null=True, verbose_name='Decommission Sealant Material')),
                ('decommission_backfill_material', models.CharField(blank=True, max_length=100, null=True, verbose_name='Decommission Backfill Material')),
                ('decommission_details', models.CharField(blank=True, max_length=250, null=True, verbose_name='Decommission Details')),
                ('driller_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Name of Person Who Did the Work')),
                ('consultant_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Consultant Name')),
                ('consultant_company', models.CharField(blank=True, max_length=200, null=True, verbose_name='Consultant Company')),
                ('aquifer_vulnerability_index', models.DecimalField(blank=True, decimal_places=0, max_digits=10, null=True, verbose_name='AVI')),
                ('storativity', models.DecimalField(blank=True, decimal_places=7, max_digits=8, null=True, verbose_name='Storativity')),
                ('transmissivity', models.DecimalField(blank=True, decimal_places=0, max_digits=10, null=True, verbose_name='Transmissivity')),
                ('hydraulic_conductivity', models.TextField(blank=True, max_length=100, null=True, verbose_name='Hydraulic Conductivity')),
                ('specific_storage', models.TextField(blank=True, max_length=100, null=True, verbose_name='Specific Storage')),
                ('specific_yield', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Specific Yield')),
                ('testing_method', models.TextField(blank=True, max_length=100, null=True, verbose_name='Testing Method')),
                ('testing_duration', models.PositiveIntegerField(blank=True, null=True)),
                ('analytic_solution_type', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Analytic Solution Type')),
                ('boundary_effect', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Boundary Effect')),
                ('yield_estimation_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Estimation Rate')),
                ('yield_estimation_duration', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Estimation Duration')),
                ('static_level_before_test', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.0'))], verbose_name='SWL Before Test')),
                ('drawdown', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('hydro_fracturing_performed', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], default=False, verbose_name='Hydro-fracturing Performed?')),
                ('hydro_fracturing_yield_increase', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Well Yield Increase Due to Hydro-fracturing')),
                ('recommended_pump_depth', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Recommended pump depth')),
                ('recommended_pump_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Recommended pump rate')),
                ('aquifer', models.ForeignKey(blank=True, db_column='aquifer_id', null=True, on_delete=django.db.models.deletion.PROTECT, to='aquifers.Aquifer', verbose_name='Aquifer ID Number')),
                ('aquifer_lithology', models.ForeignKey(blank=True, db_column='aquifer_lithology_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.AquiferLithologyCode', verbose_name='Aquifer Lithology')),
                ('bcgs_id', models.ForeignKey(blank=True, db_column='bcgs_id', null=True, on_delete=django.db.models.deletion.PROTECT, to='wells.BCGS_Numbers', verbose_name='BCGS Mapsheet Number')),
                ('company_of_person_responsible', models.ForeignKey(blank=True, db_column='org_of_person_responsible_guid', null=True, on_delete=django.db.models.deletion.PROTECT, to='registries.Organization', verbose_name='Company of person responsible for drilling')),
                ('coordinate_acquisition_code', models.ForeignKey(blank=True, db_column='coordinate_acquisition_code', null=True, on_delete=django.db.models.deletion.PROTECT, to='wells.CoordinateAcquisitionCode', verbose_name='Location Accuracy Code')),
                ('decommission_method', models.ForeignKey(blank=True, db_column='decommission_method_code', null='True', on_delete=django.db.models.deletion.PROTECT, to='wells.DecommissionMethodCode', verbose_name='Method of Decommission')),
                ('development_methods', models.ManyToManyField(blank=True, to='wells.DevelopmentMethodCode', verbose_name='Development Methods')),
                ('drilling_company', models.ForeignKey(blank=True, db_column='drilling_company_guid', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.DrillingCompany', verbose_name='Drilling Company')),
                ('drilling_methods', models.ManyToManyField(blank=True, to='wells.DrillingMethodCode', verbose_name='Drilling Methods')),
                ('filter_pack_material', models.ForeignKey(blank=True, db_column='filter_pack_material_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.FilterPackMaterialCode', verbose_name='Filter Pack Material')),
                ('filter_pack_material_size', models.ForeignKey(blank=True, db_column='filter_pack_material_size_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.FilterPackMaterialSizeCode', verbose_name='Filter Pack Material Size')),
                ('ground_elevation_method', models.ForeignKey(blank=True, db_column='ground_elevation_method_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.GroundElevationMethodCode', verbose_name='Elevation Determined By')),
                ('intended_water_use', models.ForeignKey(blank=True, db_column='intended_water_use_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.IntendedWaterUseCode', verbose_name='Intended Water Use')),
                ('land_district', models.ForeignKey(blank=True, db_column='land_district_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.LandDistrictCode', verbose_name='Land District')),
                ('licenced_status', models.ForeignKey(blank=True, db_column='licenced_status_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.LicencedStatusCode', verbose_name='Licenced Status')),
                ('liner_material', models.ForeignKey(blank=True, db_column='liner_material_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.LinerMaterialCode', verbose_name='Liner Material')),
                ('observation_well_status', models.ForeignKey(blank=True, db_column='obs_well_status_code', null=True, on_delete=django.db.models.deletion.PROTECT, to='wells.ObsWellStatusCode', verbose_name='Observation Well Status')),
                ('owner_province_state', models.ForeignKey(blank=True, db_column='province_state_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='gwells.ProvinceStateCode', verbose_name='Province')),
                ('person_responsible', models.ForeignKey(blank=True, db_column='person_responsible_guid', null=True, on_delete=django.db.models.deletion.PROTECT, to='registries.Person', verbose_name='Person Responsible for Drilling')),
                ('screen_bottom', models.ForeignKey(blank=True, db_column='screen_bottom_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='gwells.ScreenBottomCode', verbose_name='Bottom')),
                ('screen_intake_method', models.ForeignKey(blank=True, db_column='screen_intake_method_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='gwells.ScreenIntakeMethodCode', verbose_name='Intake Method')),
                ('screen_material', models.ForeignKey(blank=True, db_column='screen_material_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='gwells.ScreenMaterialCode', verbose_name='Material')),
                ('screen_opening', models.ForeignKey(blank=True, db_column='screen_opening_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='gwells.ScreenOpeningCode', verbose_name='Opening')),
                ('screen_type', models.ForeignKey(blank=True, db_column='screen_type_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='gwells.ScreenTypeCode', verbose_name='Type')),
                ('surface_seal_material', models.ForeignKey(blank=True, db_column='surface_seal_material_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.SurfaceSealMaterialCode', verbose_name='Surface Seal Material')),
                ('surface_seal_method', models.ForeignKey(blank=True, db_column='surface_seal_method_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.SurfaceSealMethodCode', verbose_name='Surface Seal Installation Method')),
                ('water_quality_characteristics', models.ManyToManyField(blank=True, db_table='well_water_quality', to='wells.WaterQualityCharacteristic', verbose_name='Obvious Water Quality Characteristics')),
                ('well_class', models.ForeignKey(db_column='well_class_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.WellClassCode', verbose_name='Well Class')),
                ('well_disinfected_status', models.ForeignKey(blank=True, db_column='well_disinfected_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.WellDisinfectedCode', verbose_name='Well Disinfected Code')),
                ('well_publication_status', models.ForeignKey(db_column='well_publication_status_code', default='Published', on_delete=django.db.models.deletion.CASCADE, to='wells.WellPublicationStatusCode', verbose_name='Well Publication Status')),
                ('well_status', models.ForeignKey(blank=True, db_column='well_status_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.WellStatusCode', verbose_name='Well Status')),
                ('well_subclass', models.ForeignKey(blank=True, db_column='well_subclass_guid', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.WellSubclassCode', verbose_name='Well Subclass')),
                ('well_yield_unit', models.ForeignKey(blank=True, db_column='well_yield_unit_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.WellYieldUnitCode')),
                ('yield_estimation_method', models.ForeignKey(blank=True, db_column='yield_estimation_method_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.YieldEstimationMethodCode', verbose_name='Estimation Method')),
            ],
            options={
                'db_table': 'well',
            },
            bases=(models.Model, gwells.db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='Screen',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('screen_guid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('start', models.DecimalField(blank=True, db_column='screen_from', decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='From')),
                ('end', models.DecimalField(db_column='screen_to', decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='To')),
                ('diameter', models.DecimalField(blank=True, db_column='screen_diameter', decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.0'))], verbose_name='Diameter')),
                ('slot_size', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Slot Size')),
                ('activity_submission', models.ForeignKey(blank=True, db_column='filing_number', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='screen_set', to='wells.ActivitySubmission')),
                ('assembly_type', models.ForeignKey(blank=True, db_column='screen_assembly_type_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='gwells.ScreenAssemblyTypeCode')),
                ('well', models.ForeignKey(blank=True, db_column='well_tag_number', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='screen_set', to='wells.Well')),
            ],
            options={
                'db_table': 'screen',
                'ordering': ['start', 'end'],
            },
            bases=(models.Model, gwells.db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='LithologyDescription',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('lithology_description_guid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('lithology_from', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='From')),
                ('lithology_to', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='To')),
                ('lithology_raw_data', models.CharField(blank=True, max_length=250, null=True, verbose_name='Raw Data')),
                ('water_bearing_estimated_flow', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True, verbose_name='Water Bearing Estimated Flow')),
                ('lithology_observation', models.CharField(blank=True, max_length=250, null=True, verbose_name='Observations')),
                ('lithology_sequence_number', models.BigIntegerField(blank=True, null=True)),
                ('activity_submission', models.ForeignKey(blank=True, db_column='filing_number', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lithologydescription_set', to='wells.ActivitySubmission')),
                ('bedrock_material', models.ForeignKey(blank=True, db_column='bedrock_material_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='gwells.BedrockMaterialCode', verbose_name='Bedrock Material')),
                ('bedrock_material_descriptor', models.ForeignKey(blank=True, db_column='bedrock_material_descriptor_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='gwells.BedrockMaterialDescriptorCode', verbose_name='Descriptor')),
                ('lithology_colour', models.ForeignKey(blank=True, db_column='lithology_colour_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='gwells.LithologyColourCode', verbose_name='Colour')),
                ('lithology_description', models.ForeignKey(blank=True, db_column='lithology_description_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='gwells.LithologyDescriptionCode', verbose_name='Description')),
                ('lithology_hardness', models.ForeignKey(blank=True, db_column='lithology_hardness_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='gwells.LithologyHardnessCode', verbose_name='Hardness')),
                ('lithology_material', models.ForeignKey(blank=True, db_column='lithology_material_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='gwells.LithologyMaterialCode', verbose_name='Material')),
                ('lithology_moisture', models.ForeignKey(blank=True, db_column='lithology_moisture_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='gwells.LithologyMoistureCode', verbose_name='Moisture')),
                ('lithology_structure', models.ForeignKey(blank=True, db_column='lithology_structure_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='gwells.LithologyStructureCode', verbose_name='Bedding')),
                ('secondary_surficial_material', models.ForeignKey(blank=True, db_column='secondary_surficial_material_code', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='secondary_surficial_material_set', to='gwells.SurficialMaterialCode', verbose_name='Secondary Surficial Material')),
                ('surficial_material', models.ForeignKey(blank=True, db_column='surficial_material_code', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='surficial_material_set', to='gwells.SurficialMaterialCode', verbose_name='Surficial Material')),
                ('water_bearing_estimated_flow_units', models.ForeignKey(blank=True, db_column='well_yield_unit_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.WellYieldUnitCode', verbose_name='Units')),
                ('well', models.ForeignKey(blank=True, db_column='well_tag_number', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lithologydescription_set', to='wells.Well')),
            ],
            options={
                'db_table': 'lithology_description',
                'ordering': ['lithology_sequence_number'],
            },
            bases=(models.Model, gwells.db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='LinerPerforation',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('liner_perforation_guid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('start', models.DecimalField(db_column='liner_perforation_from', decimal_places=2, max_digits=7, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Perforated From')),
                ('end', models.DecimalField(db_column='liner_perforation_to', decimal_places=2, max_digits=7, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Perforated To')),
                ('well', models.ForeignKey(blank=True, db_column='well_tag_number', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='linerperforation_set', to='wells.Well')),
            ],
            options={
                'db_table': 'liner_perforation',
                'ordering': ['start', 'end'],
            },
            bases=(models.Model, gwells.db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='HydraulicProperty',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('hydraulic_property_guid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('avi', models.DecimalField(blank=True, decimal_places=0, max_digits=10, null=True, verbose_name='AVI')),
                ('storativity', models.DecimalField(blank=True, decimal_places=7, max_digits=8, null=True, verbose_name='Storativity')),
                ('transmissivity', models.DecimalField(blank=True, decimal_places=0, max_digits=10, null=True, verbose_name='Transmissivity')),
                ('hydraulic_conductivity', models.TextField(blank=True, max_length=100, null=True, verbose_name='Hydraulic Conductivity')),
                ('specific_storage', models.TextField(blank=True, max_length=100, null=True, verbose_name='Specific Storage')),
                ('specific_yield', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Specific Yield')),
                ('testing_method', models.TextField(blank=True, max_length=100, null=True, verbose_name='Testing Method')),
                ('testing_duration', models.PositiveIntegerField(blank=True, null=True)),
                ('analytic_solution_type', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Analytic Solution Type')),
                ('boundary_effect', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Boundary Effect')),
                ('well', models.ForeignKey(db_column='well_tag_number', on_delete=django.db.models.deletion.CASCADE, to='wells.Well')),
            ],
            options={
                'verbose_name_plural': 'Hydraulic Properties',
                'db_table': 'hydraulic_property',
            },
            bases=(models.Model, gwells.db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='DecommissionDescription',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('decommission_description_guid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('start', models.DecimalField(db_column='decommission_description_from', decimal_places=2, max_digits=7, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Decommissioned From')),
                ('end', models.DecimalField(db_column='decommission_description_to', decimal_places=2, max_digits=7, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Decommissioned To')),
                ('observations', models.CharField(blank=True, max_length=255, null=True)),
                ('activity_submission', models.ForeignKey(blank=True, db_column='filing_number', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='decommission_description_set', to='wells.ActivitySubmission')),
                ('material', models.ForeignKey(db_column='decommission_material_code', on_delete=django.db.models.deletion.PROTECT, to='wells.DecommissionMaterialCode')),
                ('well', models.ForeignKey(blank=True, db_column='well_tag_number', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='decommission_description_set', to='wells.Well')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, gwells.db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='Casing',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('casing_guid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('start', models.DecimalField(blank=True, db_column='casing_from', decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='From')),
                ('end', models.DecimalField(blank=True, db_column='casing_to', decimal_places=2, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='To')),
                ('diameter', models.DecimalField(blank=True, decimal_places=3, max_digits=8, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.5'))], verbose_name='Diameter')),
                ('wall_thickness', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Wall Thickness')),
                ('drive_shoe', models.NullBooleanField(choices=[(False, 'No'), (True, 'Yes')], default=False, verbose_name='Drive Shoe')),
                ('activity_submission', models.ForeignKey(blank=True, db_column='filing_number', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='casing_set', to='wells.ActivitySubmission')),
                ('casing_code', models.ForeignKey(db_column='casing_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.CasingCode', verbose_name='Casing Type Code')),
                ('casing_material', models.ForeignKey(blank=True, db_column='casing_material_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.CasingMaterialCode', verbose_name='Casing Material Code')),
                ('well', models.ForeignKey(blank=True, db_column='well_tag_number', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='casing_set', to='wells.Well')),
            ],
            options={
                'db_table': 'casing',
                'ordering': ['start', 'end'],
            },
            bases=(models.Model, gwells.db_comments.model_mixins.DBComments),
        ),
        migrations.CreateModel(
            name='ActivitySubmissionLinerPerforation',
            fields=[
                ('create_user', models.CharField(max_length=60)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_user', models.CharField(max_length=60)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('liner_perforation_guid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('start', models.DecimalField(db_column='liner_perforation_from', decimal_places=2, max_digits=7, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Perforated From')),
                ('end', models.DecimalField(db_column='liner_perforation_to', decimal_places=2, max_digits=7, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Perforated To')),
                ('activity_submission', models.ForeignKey(blank=True, db_column='filing_number', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='linerperforation_set', to='wells.ActivitySubmission')),
            ],
            options={
                'ordering': ['start', 'end'],
            },
            bases=(models.Model, gwells.db_comments.model_mixins.DBComments),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='aquifer_lithology',
            field=models.ForeignKey(blank=True, db_column='aquifer_lithology_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.AquiferLithologyCode', verbose_name='Aquifer Lithology'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='company_of_person_responsible',
            field=models.ForeignKey(blank=True, db_column='org_of_person_responsible_guid', null=True, on_delete=django.db.models.deletion.PROTECT, to='registries.Organization', verbose_name='Company of person responsible for drilling'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='coordinate_acquisition_code',
            field=models.ForeignKey(blank=True, db_column='coordinate_acquisition_code', null=True, on_delete=django.db.models.deletion.PROTECT, to='wells.CoordinateAcquisitionCode', verbose_name='Location Accuracy Code'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='decommission_method',
            field=models.ForeignKey(blank=True, db_column='decommission_method_code', null=True, on_delete=django.db.models.deletion.PROTECT, to='wells.DecommissionMethodCode', verbose_name='Method of Decommission'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='development_methods',
            field=models.ManyToManyField(blank=True, to='wells.DevelopmentMethodCode', verbose_name='Development Methods'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='drilling_methods',
            field=models.ManyToManyField(blank=True, to='wells.DrillingMethodCode', verbose_name='Drilling Methods'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='filter_pack_material',
            field=models.ForeignKey(blank=True, db_column='filter_pack_material_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.FilterPackMaterialCode', verbose_name='Filter Pack Material'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='filter_pack_material_size',
            field=models.ForeignKey(blank=True, db_column='filter_pack_material_size_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.FilterPackMaterialSizeCode', verbose_name='Filter Pack Material Size'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='ground_elevation_method',
            field=models.ForeignKey(blank=True, db_column='ground_elevation_method_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.GroundElevationMethodCode', verbose_name='Elevation Determined By'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='intended_water_use',
            field=models.ForeignKey(blank=True, db_column='intended_water_use_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.IntendedWaterUseCode', verbose_name='Intended Water Use'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='land_district',
            field=models.ForeignKey(blank=True, db_column='land_district_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.LandDistrictCode', verbose_name='Land District'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='liner_material',
            field=models.ForeignKey(blank=True, db_column='liner_material_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.LinerMaterialCode', verbose_name='Liner Material'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='observation_well_status',
            field=models.ForeignKey(blank=True, db_column='obs_well_status_code', null=True, on_delete=django.db.models.deletion.PROTECT, to='wells.ObsWellStatusCode', verbose_name='Observation Well Status'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='owner_province_state',
            field=models.ForeignKey(blank=True, db_column='province_state_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='gwells.ProvinceStateCode', verbose_name='Province'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='person_responsible',
            field=models.ForeignKey(blank=True, db_column='person_responsible_guid', null=True, on_delete=django.db.models.deletion.PROTECT, to='registries.Person', verbose_name='Person Responsible for Drilling'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='screen_bottom',
            field=models.ForeignKey(blank=True, db_column='screen_bottom_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='gwells.ScreenBottomCode', verbose_name='Bottom'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='screen_intake_method',
            field=models.ForeignKey(blank=True, db_column='screen_intake_method_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='gwells.ScreenIntakeMethodCode', verbose_name='Intake'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='screen_material',
            field=models.ForeignKey(blank=True, db_column='screen_material_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='gwells.ScreenMaterialCode', verbose_name='Material'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='screen_opening',
            field=models.ForeignKey(blank=True, db_column='screen_opening_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='gwells.ScreenOpeningCode', verbose_name='Opening'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='screen_type',
            field=models.ForeignKey(blank=True, db_column='screen_type_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='gwells.ScreenTypeCode', verbose_name='Type'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='surface_seal_material',
            field=models.ForeignKey(blank=True, db_column='surface_seal_material_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.SurfaceSealMaterialCode', verbose_name='Surface Seal Material'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='surface_seal_method',
            field=models.ForeignKey(blank=True, db_column='surface_seal_method_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.SurfaceSealMethodCode', verbose_name='Surface Seal Installation Method'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='water_quality_characteristics',
            field=models.ManyToManyField(blank=True, db_table='activity_submission_water_quality', to='wells.WaterQualityCharacteristic', verbose_name='Obvious Water Quality Characteristics'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='well',
            field=models.ForeignKey(blank=True, db_column='well_tag_number', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.Well'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='well_activity_type',
            field=models.ForeignKey(db_column='well_activity_code', on_delete=django.db.models.deletion.CASCADE, to='submissions.WellActivityCode', verbose_name='Type of Work'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='well_class',
            field=models.ForeignKey(blank=True, db_column='well_class_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.WellClassCode', verbose_name='Well Class'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='well_disinfected_status',
            field=models.ForeignKey(blank=True, db_column='well_disinfected_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.WellDisinfectedCode', verbose_name='Well Disinfected Code'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='well_publication_status',
            field=models.ForeignKey(db_column='well_publication_status_code', default='Published', on_delete=django.db.models.deletion.CASCADE, to='wells.WellPublicationStatusCode', verbose_name='Well Publication Status'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='well_status',
            field=models.ForeignKey(blank=True, db_column='well_status_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.WellStatusCode', verbose_name='Well Status'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='well_subclass',
            field=models.ForeignKey(blank=True, db_column='well_subclass_guid', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.WellSubclassCode', verbose_name='Well Subclass'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='well_yield_unit',
            field=models.ForeignKey(blank=True, db_column='well_yield_unit_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.WellYieldUnitCode'),
        ),
        migrations.AddField(
            model_name='activitysubmission',
            name='yield_estimation_method',
            field=models.ForeignKey(blank=True, db_column='yield_estimation_method_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='wells.YieldEstimationMethodCode', verbose_name='Estimation Method'),
        ),
        migrations.RunPython(
            code=wells.data_migrations.load_casing_codes_fixture,
            reverse_code=wells.data_migrations.unload_casing_codes_fixture,
        ),
        migrations.RunPython(
            code=wells.data_migrations.load_water_quality_codes,
            reverse_code=wells.data_migrations.unload_water_quality_codes,
        ),
        migrations.RunPython(
            code=wells.data_migrations.change_code_description,
            reverse_code=wells.data_migrations.restore_code_description,
        ),
        migrations.RunPython(
            code=wells.data_migrations.load_decomission_material_codes,
            reverse_code=wells.data_migrations.unload_decomission_material_codes,
        ),
        migrations.RunPython(
            code=wells.data_migrations.load_filter_pack_codes,
            reverse_code=wells.data_migrations.unload_filter_pack_codes,
        ),
        migrations.RunPython(
            code=wells.data_migrations.load_coordinate_aquisition_data,
            reverse_code=wells.data_migrations.unload_coordinate_aquisition_data,
        ),
        migrations.RunPython(
            code=wells.data_migrations.load_lithology_moisture_codes,
            reverse_code=wells.data_migrations.unload_lithology_moisture_codes,
        ),
        migrations.RunPython(
            code=wells.data_migrations.load_unspecified_coordinate_aquisition_code,
            reverse_code=wells.data_migrations.unload_unspecified_coordinate_aquisition_code,
        ),
        migrations.RunPython(
            code=wells.data_migrations.insert_unk_well_class_code,
            reverse_code=wells.data_migrations.revert_unk_well_class_code,
        ),
        migrations.RunPython(
            code=wells.data_migrations.load_other_code_values,
            reverse_code=wells.data_migrations.unload_other_code_values,
        ),
        migrations.RunPython(
            code=wells.data_migrations.load_well_publication_status,
            reverse_code=wells.data_migrations.unload_well_publication_status,
        ),
        migrations.RunPython(
            code=wells.data_migrations.load_aquifer_lithology_code_values,
            reverse_code=wells.data_migrations.unload_aquifer_lithology_code_values,
        ),
        migrations.RunPython(
            code=wells.data_migrations.update_update_user_fields,
        ),
        migrations.RunPython(
            code=wells.data_migrations.load_well_disinfected_codes,
            reverse_code=wells.data_migrations.unload_well_disinfected_codes,
        ),
    ]
